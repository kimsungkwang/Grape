{"ast":null,"code":"import axios from \"axios\";\nimport { all, delay, fork, put, takeLatest, throttle, call } from \"redux-saga/effects\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nfunction loadPostsAPI(data) {\n  return axios.get(\"/posts\", data);\n}\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    console.log(result);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // POST(작성)   /post/1/comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data //PostId, UserId 가 들어있음\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction uploadImagesAPI(data) {\n  return axios.post(\"/post/images\", data);\n}\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment), fork(watchLikePost), fork(watchUnlikePost), fork(watchUploadImages)]);\n}","map":{"version":3,"names":["axios","all","delay","fork","put","takeLatest","throttle","call","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","result","type","err","console","error","response","addPostAPI","post","addPost","log","id","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","likePostAPI","patch","likePost","unlikePostAPI","unlikePost","uploadImagesAPI","uploadImages","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","watchLikePost","watchUnlikePost","watchUploadImages","postSaga"],"sources":["/Users/kimsungkwang/WORKSPACE/Nodejs/Grape/prepare/front/sagas/post.js"],"sourcesContent":["import axios from \"axios\";\nimport { all, delay, fork, put, takeLatest, throttle, call } from \"redux-saga/effects\";\n\nimport {\n  ADD_COMMENT_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  LOAD_POSTS_FAILURE,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  REMOVE_POST_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  LIKE_POST_FAILURE,\n  LIKE_POST_REQUEST,\n  LIKE_POST_SUCCESS,\n  UNLIKE_POST_FAILURE,\n  UNLIKE_POST_REQUEST,\n  UNLIKE_POST_SUCCESS,\n  UPLOAD_IMAGES_FAILURE,\n  UPLOAD_IMAGES_REQUEST,\n  UPLOAD_IMAGES_SUCCESS,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/posts\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    console.log(result);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // POST(작성)   /post/1/comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data, //PostId, UserId 가 들어있음\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post(\"/post/images\", data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchLoadPosts),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n    fork(watchLikePost),\n    fork(watchUnlikePost),\n    fork(watchUploadImages),\n  ]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}