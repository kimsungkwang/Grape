{"ast":null,"code":"import axios from \"axios\";\nimport shortId from \"shortid\";\nimport { all, delay, fork, put, takeLatest, throttle, call } from \"redux-saga/effects\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nfunction loadPostsAPI(data) {\n  return axios.get(\"/api/posts\", data);\n}\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  });\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // POST   /post\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["axios","shortId","all","delay","fork","put","takeLatest","throttle","call","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","type","err","console","error","response","addPostAPI","post","content","addPost","result","id","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["/Users/kimsungkwang/WORKSPACE/Nodejs/Grape/prepare/front/sagas/post.js"],"sourcesContent":["import axios from \"axios\";\nimport shortId from \"shortid\";\nimport { all, delay, fork, put, takeLatest, throttle, call } from \"redux-saga/effects\";\n\nimport {\n  ADD_COMMENT_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  generateDummyPost,\n  LOAD_POSTS_FAILURE,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  REMOVE_POST_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/api/posts\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10),\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", { content: data });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);  // POST   /post\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}