{"ast":null,"code":"var __jsx = React.createElement;\n// hashtag/[tag].js\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport { END } from 'redux-saga';\nimport { useInView } from 'react-intersection-observer';\nimport axios from 'axios';\nimport { LOAD_HASHTAG_POSTS_REQUEST, LOAD_POSTS_REQUEST } from '../../reducers/post';\nimport PostCard from '../../components/PostCard';\nimport wrapper from '../../store/configureStore';\nimport { LOAD_MY_INFO_REQUEST } from '../../reducers/user';\nimport AppLayout from '../../components/AppLayout';\nfunction Hashtag() {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const {\n    tag\n  } = router.query;\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading\n  } = useSelector(state => state.post);\n  const [ref, inView] = useInView();\n  useEffect(() => {\n    if (inView && hasMorePosts && !loadPostsLoading) {\n      var _mainPosts;\n      const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n      dispatch({\n        type: LOAD_POSTS_REQUEST,\n        lastId,\n        data: tag\n      });\n    }\n  }, [inView, hasMorePosts, loadPostsLoading, mainPosts, tag]);\n  return __jsx(AppLayout, null, mainPosts.map(c => __jsx(PostCard, {\n    key: c.id,\n    post: c\n  })), __jsx(\"div\", {\n    ref: hasMorePosts && !loadPostsLoading ? ref : undefined,\n    style: {\n      height: 10\n    }\n  }));\n}\nexport const getServerSideProps = wrapper.getServerSideProps(store => async ({\n  req,\n  params\n}) => {\n  const cookie = req ? req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n  if (req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n  store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  store.dispatch({\n    type: LOAD_HASHTAG_POSTS_REQUEST,\n    data: params.tag\n  });\n  store.dispatch(END);\n  await store.sagaTask.toPromise();\n});\nexport default Hashtag;","map":null,"metadata":{},"sourceType":"module"}