{"ast":null,"code":"var _jsxFileName = \"/Users/kimsungkwang/WORKSPACE/Nodejs/Grape/prepare/front/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport AppLayout from \"../components/AppLayout\";\nimport PostForm from \"../components/PostForm\";\nimport PostCard from \"../components/PostCard\";\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\nimport { LOAD_USER_REQUEST } from \"../reducers/user\";\nconst Home = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading,\n    repostError\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    if (repostError) {\n      alert(repostError);\n    }\n  }, [repostError]);\n\n  // 유저 , 게시글 불러오기\n  useEffect(() => {\n    dispatch({\n      type: LOAD_USER_REQUEST\n    });\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n  }, []);\n  useEffect(() => {\n    function onScroll() {\n      if (window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId\n          });\n        }\n      }\n    }\n    window.addEventListener(\"scroll\", onScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", onScroll);\n    };\n  }, [hasMorePosts, loadPostsLoading, mainPosts]);\n  return __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, me && __jsx(PostForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 14\n    }\n  }), mainPosts.map(post => __jsx(PostCard, {\n    key: post.id,\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  })));\n};\nHome.getInitia;\nexport default Home;","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","AppLayout","PostForm","PostCard","LOAD_POSTS_REQUEST","LOAD_USER_REQUEST","Home","dispatch","me","state","user","mainPosts","hasMorePosts","loadPostsLoading","repostError","post","alert","type","onScroll","window","pageYOffset","document","documentElement","clientHeight","scrollHeight","lastId","length","id","addEventListener","removeEventListener","map","getInitia"],"sources":["/Users/kimsungkwang/WORKSPACE/Nodejs/Grape/prepare/front/pages/index.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport AppLayout from \"../components/AppLayout\";\nimport PostForm from \"../components/PostForm\";\nimport PostCard from \"../components/PostCard\";\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\nimport { LOAD_USER_REQUEST } from \"../reducers/user\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const { me } = useSelector((state) => state.user);\n  const { mainPosts, hasMorePosts, loadPostsLoading, repostError } = useSelector((state) => state.post);\n\n  useEffect(() => {\n    if (repostError) {\n      alert(repostError);\n    }\n  }, [repostError]);\n\n  // 유저 , 게시글 불러오기\n  useEffect(() => {\n    dispatch({\n      type: LOAD_USER_REQUEST,\n    });\n    dispatch({\n      type: LOAD_POSTS_REQUEST,\n    });\n  }, []);\n\n  useEffect(() => {\n    function onScroll() {\n      if (window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          const lastId = mainPosts[mainPosts.length - 1]?.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId,\n          });\n        }\n      }\n    }\n    window.addEventListener(\"scroll\", onScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", onScroll);\n    };\n  }, [hasMorePosts, loadPostsLoading, mainPosts]);\n\n  return (\n    <AppLayout>\n      {me && <PostForm />}\n      {mainPosts.map((post) => (\n        <PostCard key={post.id} post={post} />\n      ))}\n    </AppLayout>\n  );\n};\n\nHome.getInitia\n\nexport default Home;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAEtD,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,SAASC,kBAAkB,QAAQ,kBAAkB;AACrD,SAASC,iBAAiB,QAAQ,kBAAkB;AAEpD,MAAMC,IAAI,GAAG,MAAM;EACjB,MAAMC,QAAQ,GAAGR,WAAW,EAAE;EAC9B,MAAM;IAAES;EAAG,CAAC,GAAGR,WAAW,CAAES,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC;EACjD,MAAM;IAAEC,SAAS;IAAEC,YAAY;IAAEC,gBAAgB;IAAEC;EAAY,CAAC,GAAGd,WAAW,CAAES,KAAK,IAAKA,KAAK,CAACM,IAAI,CAAC;EAErGjB,SAAS,CAAC,MAAM;IACd,IAAIgB,WAAW,EAAE;MACfE,KAAK,CAACF,WAAW,CAAC;IACpB;EACF,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;;EAEjB;EACAhB,SAAS,CAAC,MAAM;IACdS,QAAQ,CAAC;MACPU,IAAI,EAAEZ;IACR,CAAC,CAAC;IACFE,QAAQ,CAAC;MACPU,IAAI,EAAEb;IACR,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAENN,SAAS,CAAC,MAAM;IACd,SAASoB,QAAQ,GAAG;MAClB,IAAIC,MAAM,CAACC,WAAW,GAAGC,QAAQ,CAACC,eAAe,CAACC,YAAY,GAAGF,QAAQ,CAACC,eAAe,CAACE,YAAY,GAAG,GAAG,EAAE;QAC5G,IAAIZ,YAAY,IAAI,CAACC,gBAAgB,EAAE;UAAA;UACrC,MAAMY,MAAM,iBAAGd,SAAS,CAACA,SAAS,CAACe,MAAM,GAAG,CAAC,CAAC,+CAA/B,WAAiCC,EAAE;UAClDpB,QAAQ,CAAC;YACPU,IAAI,EAAEb,kBAAkB;YACxBqB;UACF,CAAC,CAAC;QACJ;MACF;IACF;IACAN,MAAM,CAACS,gBAAgB,CAAC,QAAQ,EAAEV,QAAQ,CAAC;IAC3C,OAAO,MAAM;MACXC,MAAM,CAACU,mBAAmB,CAAC,QAAQ,EAAEX,QAAQ,CAAC;IAChD,CAAC;EACH,CAAC,EAAE,CAACN,YAAY,EAAEC,gBAAgB,EAAEF,SAAS,CAAC,CAAC;EAE/C,OACE,MAAC,SAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACPH,EAAE,IAAI,MAAC,QAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,EAClBG,SAAS,CAACmB,GAAG,CAAEf,IAAI,IAClB,MAAC,QAAQ;IAAC,GAAG,EAAEA,IAAI,CAACY,EAAG;IAAC,IAAI,EAAEZ,IAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EACpC,CAAC,CACQ;AAEhB,CAAC;AAEDT,IAAI,CAACyB,SAAS;AAEd,eAAezB,IAAI"},"metadata":{},"sourceType":"module"}