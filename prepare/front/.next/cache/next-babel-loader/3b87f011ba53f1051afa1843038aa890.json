{"ast":null,"code":"import shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from 'faker';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수 (불변성은 지키면서 )\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.hasMorePosts = draft.mainPosts.length < 50;\n      break;\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(action.data);\n      break;\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n      break;\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        post.Comments.unshift(action.data.content);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // const post = { ...state.mainPosts[postIndex] };\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n        // return {\n        //   ...state,\n        //   mainPosts,\n        //   addCommentLoading: false,\n        //   addCommentDone: true,\n        // };\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n    default:\n      break;\n  }\n});\nexport default reducer;","map":{"version":3,"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","concat","length","error","unshift","filter","v","post","find","postId"],"sources":["/Users/kimsungkwang/WORKSPACE/Nodejs/Grape/prepare/front/reducers/post.js"],"sourcesContent":["import shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from 'faker';\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n};\n\nexport const generateDummyPost = (number) =>\n  Array(number)\n    .fill()\n    .map(() => ({\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName(),\n      },\n      content: faker.lorem.paragraph(),\n      Images: [\n        {\n          src: faker.image.image(),\n        },\n      ],\n      Comments: [\n        {\n          User: {\n            id: shortId.generate(),\n            nickname: faker.name.findName(),\n          },\n          content: faker.lorem.sentence(),\n        },\n      ],\n    }));\n\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\n\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수 (불변성은 지키면서 )\nconst reducer = (state = initialState, action) =>\n  produce(state, (draft) => {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n        post.Comments.unshift(action.data.content);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // const post = { ...state.mainPosts[postIndex] };\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n        // return {\n        //   ...state,\n        //   mainPosts,\n        //   addCommentLoading: false,\n        //   addCommentDone: true,\n        // };\n      }\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n\nexport default reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}