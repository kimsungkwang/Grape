{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { Form, Input, Checkbox, Button } from \"antd\";\nimport Head from \"next/head\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Router from \"next/router\";\nimport axios from \"axios\";\nimport { END } from \"redux-saga\";\nimport AppLayout from \"../components/AppLayout\";\nimport useInput from \"../hooks/useInput\";\nimport { SIGN_UP_REQUEST, LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\nimport wrapper from \"../store/configureStore\";\nconst TextInput = ({\n  value\n}) => {\n  return __jsx(\"div\", null, value);\n};\nconst Signup = () => {\n  const dispatch = useDispatch();\n  const {\n    signUpLoadung,\n    signUpDone,\n    signUpError,\n    changeNicknameError\n  } = useSelector(state => state.user);\n\n  // 로그인 한 상태로 회원가입 페이지 들어 갔을 시\n  // useEffect(() => {\n  //   if (me && me.id) {\n  //     alert(\"이미 회원입니다!\");\n  //     Router.replace(\"/\");\n  //   }\n  // }, [me && me.id]);\n\n  // 회원가입 완료 시 메인페이지로 보내주기\n  useEffect(() => {\n    if (signUpDone) {\n      alert(\"회원가입 완료! 로그인 해주세요\");\n      Router.replace(\"/\");\n    }\n  }, [signUpDone]);\n\n  // 회원가입 에러\n  useEffect(() => {\n    if (signUpError) {\n      alert(signUpError);\n    }\n  }, [signUpError]);\n  useEffect(() => {\n    if (changeNicknameError) {\n      alert(changeNicknameError);\n    }\n  }, [changeNicknameError]);\n  const {\n    0: passwordCheck,\n    1: setPasswordCheck\n  } = useState(\"\");\n  const {\n    0: term,\n    1: setTerm\n  } = useState(false);\n  const {\n    0: passwordError,\n    1: setPasswordError\n  } = useState(false);\n  const {\n    0: termError,\n    1: setTermError\n  } = useState(false);\n  const [email, onChangeEmail] = useInput(\"\");\n  const [nickname, onChangeNickname] = useInput(\"\");\n  const [password, onChangePassword] = useInput(\"\");\n  const onSubmit = useCallback(() => {\n    if (password !== passwordCheck) {\n      return setPasswordError(true);\n    }\n    if (!term) {\n      return setTermError(true);\n    }\n    console.log(email, nickname, password);\n    dispatch({\n      type: SIGN_UP_REQUEST,\n      data: {\n        email,\n        password,\n        nickname\n      }\n    });\n  }, [email, password, passwordCheck, term]);\n  const onChangePasswordCheck = useCallback(e => {\n    setPasswordError(e.target.value !== password);\n    setPasswordCheck(e.target.value);\n  }, [password]);\n  const onChangeTerm = useCallback(e => {\n    setTermError(false);\n    setTerm(e.target.checked);\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"\\uD68C\\uC6D0\\uAC00\\uC785 | Grape\")), __jsx(AppLayout, null, __jsx(Form, {\n    onFinish: onSubmit,\n    style: {\n      padding: 10\n    }\n  }, __jsx(\"div\", null, __jsx(\"label\", {\n    htmlFor: \"user-email\"\n  }, \"\\uC544\\uC774\\uB514\"), __jsx(\"br\", null), __jsx(Input, {\n    name: \"user-email\",\n    type: \"email\",\n    value: email,\n    required: true,\n    onChange: onChangeEmail\n  })), __jsx(\"div\", null, __jsx(\"label\", {\n    htmlFor: \"user-nick\"\n  }, \"\\uB2C9\\uB124\\uC784\"), __jsx(\"br\", null), __jsx(Input, {\n    name: \"user-nick\",\n    value: nickname,\n    required: true,\n    onChange: onChangeNickname\n  })), __jsx(\"div\", null, __jsx(\"label\", {\n    htmlFor: \"user-password\"\n  }, \"\\uBE44\\uBC00\\uBC88\\uD638\"), __jsx(\"br\", null), __jsx(Input, {\n    name: \"user-password\",\n    type: \"password\",\n    value: password,\n    required: true,\n    onChange: onChangePassword\n  })), __jsx(\"div\", null, __jsx(\"label\", {\n    htmlFor: \"user-password-check\"\n  }, \"\\uBE44\\uBC00\\uBC88\\uD638\\uCCB4\\uD06C\"), __jsx(\"br\", null), __jsx(Input, {\n    name: \"user-password-check\",\n    type: \"password\",\n    value: passwordCheck,\n    required: true,\n    onChange: onChangePasswordCheck\n  }), passwordError && __jsx(\"div\", {\n    style: {\n      color: \"red\"\n    }\n  }, \"\\uBE44\\uBC00\\uBC88\\uD638\\uAC00 \\uC77C\\uCE58\\uD558\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4.\")), __jsx(\"div\", null, __jsx(Checkbox, {\n    name: \"user-term\",\n    checked: term,\n    onChange: onChangeTerm\n  }, \"\\uB3D9\\uC758\\uD569\\uB2C8\\uB2E4.\"), termError && __jsx(\"div\", {\n    style: {\n      color: \"red\"\n    }\n  }, \"\\uC57D\\uAD00\\uC5D0 \\uB3D9\\uC758\\uD558\\uC154\\uC57C \\uD569\\uB2C8\\uB2E4.\")), __jsx(\"div\", {\n    style: {\n      marginTop: 10\n    }\n  }, __jsx(Button, {\n    loading: signUpLoadung,\n    type: \"primary\",\n    htmlType: \"submit\"\n  }, \"\\uAC00\\uC785\\uD558\\uAE30\")))));\n};\nexport const getServerSideProps = wrapper.getServerSideProps(store => async ({\n  req\n}) => {\n  console.log(\"getServerSideProps start\");\n  console.log(req.headers);\n  const cookie = req ? req.headers.cookie : \"\";\n  axios.defaults.headers.Cookie = \"\";\n  if (req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n  store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  store.dispatch(END);\n  console.log(\"getServerSideProps end\");\n  await store.sagaTask.toPromise();\n});\nexport default Signup;","map":null,"metadata":{},"sourceType":"module"}