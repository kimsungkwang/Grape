{"ast":null,"code":"import produce from \"immer\";\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null\n};\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수 (불변성은 지키면서 )\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.hasMorePosts = action.data.length === 10;\n      break;\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(action.data);\n      // draft.imagePaths = [];\n      break;\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n      break;\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        // 오류 = > find 에서 액션 데이터가 없었다\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // const post = { ...state.mainPosts[postIndex] };\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n        // return {\n        //   ...state,\n        //   mainPosts,\n        //   addCommentLoading: false,\n        //   addCommentDone: true,\n        // };\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n    default:\n      break;\n    case LIKE_POST_REQUEST:\n      draft.likePostLoading = true;\n      draft.likePostDone = false;\n      draft.likePostError = null;\n      break;\n    case LIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers.push({\n          id: action.data.UserId\n        });\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n      }\n    case LIKE_POST_FAILURE:\n      draft.likePostLoading = false;\n      draft.likePostError = action.error;\n      break;\n    case UNLIKE_POST_REQUEST:\n      draft.unlikePostLoading = true;\n      draft.unlikePostDone = false;\n      draft.unlikePostError = null;\n      break;\n    case UNLIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n    case UNLIKE_POST_FAILURE:\n      draft.unlikePostLoading = false;\n      draft.unlikePostError = action.error;\n      break;\n  }\n});\nexport default reducer;","map":{"version":3,"names":["produce","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","concat","length","error","unshift","filter","v","id","PostId","post","find","Comments","Likers","push","UserId"],"sources":["/Users/kimsungkwang/WORKSPACE/Nodejs/Grape/prepare/front/reducers/post.js"],"sourcesContent":["import produce from \"immer\";\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n};\n\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\n\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\n\n\n\n\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\n\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수 (불변성은 지키면서 )\nconst reducer = (state = initialState, action) =>\n  produce(state, (draft) => {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePosts = action.data.length === 10;\n        break;\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        // draft.imagePaths = [];\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        // 오류 = > find 에서 액션 데이터가 없었다\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // const post = { ...state.mainPosts[postIndex] };\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n        // return {\n        //   ...state,\n        //   mainPosts,\n        //   addCommentLoading: false,\n        //   addCommentDone: true,\n        // };\n      }\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        break;\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n      case LIKE_POST_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Likers.push({ id: action.data.UserId });\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n      }\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n      case UNLIKE_POST_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n    }\n  });\n\nexport default reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}