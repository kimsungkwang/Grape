{"ast":null,"code":"import axios from \"axios\";\nimport shortId from \"shortid\";\nimport { all, delay, fork, put, takeLatest, throttle } from \"redux-saga/effects\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nfunction loadPostsAPI(data) {\n  return axios.get(\"/api/posts\", data);\n}\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["axios","shortId","all","delay","fork","put","takeLatest","throttle","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","type","err","console","error","response","addPostAPI","post","addPost","id","generate","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["/Users/kimsungkwang/WORKSPACE/Nodejs/Grape/prepare/front/sagas/post.js"],"sourcesContent":["import axios from \"axios\";\nimport shortId from \"shortid\";\nimport { all, delay, fork, put, takeLatest, throttle } from \"redux-saga/effects\";\n\nimport {\n  ADD_COMMENT_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  generateDummyPost,\n  LOAD_POSTS_FAILURE,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  REMOVE_POST_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/api/posts\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10),\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}